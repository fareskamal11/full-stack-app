name: Docker Compose CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  # Add any environment variables your application needs
  NODE_ENV: test
  DATABASE_URL: postgresql://test:test@localhost:5432/testdb

jobs:
  test:
    name: Build and Test with Docker Compose
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Create .env file for testing
        run: |
          echo "NODE_ENV=test" >> .env
          echo "DATABASE_URL=postgresql://test:test@localhost:5432/testdb" >> .env
          # Add other environment variables as needed
          
      - name: Build Docker Images
        run: |
          docker-compose build --no-cache
          
      - name: Start Services
        run: |
          docker-compose up -d
          
      - name: Wait for Services to Initialize
        run: |
          echo "Waiting for services to start..."
          sleep 30
          
      - name: Check Service Status
        run: |
          docker-compose ps
          
      - name: Health Check - Backend
        run: |
          echo "Checking backend health..."
          timeout 60s bash -c 'until curl -f http://localhost:5000/health || curl -f http://localhost:5000; do sleep 5; done'
        continue-on-error: false
        
      - name: Health Check - Frontend  
        run: |
          echo "Checking frontend health..."
          timeout 60s bash -c 'until curl -f http://localhost:3000; do sleep 5; done'
        continue-on-error: false
        
      - name: Run Backend Tests (if applicable)
        run: |
          # Uncomment and modify based on your setup
          # docker-compose exec -T backend npm test
          # docker-compose exec -T backend python -m pytest
          echo "Add your backend test commands here"
        continue-on-error: false
        
      - name: Run Frontend Tests (if applicable)
        run: |
          # Uncomment and modify based on your setup  
          # docker-compose exec -T frontend npm test -- --watchAll=false
          echo "Add your frontend test commands here"
        continue-on-error: false
        
      - name: Show Container Logs (on failure)
        if: failure()
        run: |
          echo "=== Docker Compose Logs ==="
          docker-compose logs
          echo "=== Container Status ==="
          docker-compose ps
          
      - name: Stop and Remove Containers
        if: always()
        run: |
          docker-compose down -v --remove-orphans
          docker system prune -f
          
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy Scan Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Deploy to Staging
        run: |
          echo "Add your staging deployment commands here"
          # Example: Deploy to staging server, update containers, etc.
          # ssh user@staging-server 'cd /app && docker-compose pull && docker-compose up -d'
